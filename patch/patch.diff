diff -ur a/packages/services/Telecomm/src/com/android/server/telecom/CallAudioModeStateMachine.java b/packages/services/Telecomm/src/com/android/server/telecom/CallAudioModeStateMachine.java
--- a/packages/services/Telecomm/src/com/android/server/telecom/CallAudioModeStateMachine.java	Wed Apr 20 08:50:20 2016
+++ b/packages/services/Telecomm/src/com/android/server/telecom/CallAudioModeStateMachine.java	Thu May 12 01:31:40 2016
@@ -154,6 +154,11 @@
         public void enter() {
             if (mIsInitialized) {
                 Log.i(LOG_TAG, "Abandoning audio focus: now UNFOCUSED");
+                boolean setRealcallAudioParams = SystemProperties
+                    .getBoolean("ro.telephony.samsung.realcall", false);
+                if (setRealcallAudioParams) {
+                    mAudioManager.setParameters("realcall=off");
+                }
                 mAudioManager.abandonAudioFocusForCall();
                 mAudioManager.setMode(AudioManager.MODE_NORMAL);
 
@@ -295,7 +300,12 @@
             Log.i(LOG_TAG, "Audio focus entering SIM CALL state");
             boolean setMsimAudioParams = SystemProperties
                     .getBoolean("ro.multisim.set_audio_params", false);
+            boolean setRealcallAudioParams = SystemProperties
+                    .getBoolean("ro.telephony.samsung.realcall", false);
             Call call = mCallAudioManager.getForegroundCall();
+            if(setRealcallAudioParams){
+                mAudioManager.setParameters("realcall=on");
+            }
 
             mAudioManager.requestAudioFocusForCall(AudioManager.STREAM_VOICE_CALL,
                     AudioManager.AUDIOFOCUS_GAIN_TRANSIENT);

diff -ur a/hardware/qcom/fm/fmapp2/src/com/caf/fmradio/FMRadio.java b/hardware/qcom/fm/fmapp2/src/com/caf/fmradio/FMRadio.java
--- a/hardware/qcom/fm/fmapp2/src/com/caf/fmradio/FMRadio.java	Mon Jun 20 17:28:46 2016
+++ b/hardware/qcom/fm/fmapp2/src/com/caf/fmradio/FMRadio.java	Mon Jun 27 10:45:01 2016
@@ -2687,6 +2687,23 @@
          }//switch
       }//handleMessage
    };
+   
+   @Override
+   public boolean onKeyDown(int keyCode, KeyEvent event) {
+      AudioManager audio = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
+      switch (keyCode) {
+        case KeyEvent.KEYCODE_VOLUME_UP:
+            audio.adjustStreamVolume(AudioManager.STREAM_MUSIC,
+                AudioManager.ADJUST_RAISE, AudioManager.FLAG_SHOW_UI);
+            return true;
+        case KeyEvent.KEYCODE_VOLUME_DOWN:
+            audio.adjustStreamVolume(AudioManager.STREAM_MUSIC,
+                AudioManager.ADJUST_LOWER, AudioManager.FLAG_SHOW_UI);
+            return true;
+        default:
+            return super.onKeyDown(keyCode, event);
+      }
+   }
 
    private void resetFMStationInfoUI() {
       mTunedStation.setFrequency(FmSharedPreferences.getTunedFrequency());

diff -ur a/hardware/qcom/fm/fmapp2/src/com/caf/fmradio/FMRadioService.java b/hardware/qcom/fm/fmapp2/src/com/caf/fmradio/FMRadioService.java
--- a/hardware/qcom/fm/fmapp2/src/com/caf/fmradio/FMRadioService.java	Mon Jun 20 17:28:46 2016
+++ b/hardware/qcom/fm/fmapp2/src/com/caf/fmradio/FMRadioService.java	Mon Jun 27 10:45:01 2016
@@ -99,6 +99,31 @@
 import android.bluetooth.BluetoothProfile;
 import android.bluetooth.BluetoothAdapter;
 import android.bluetooth.BluetoothDevice;
+import android.database.ContentObserver;
+
+class SettingsContentObserver extends ContentObserver {
+    Context context;
+
+    public SettingsContentObserver(Context c, Handler handler) {
+        super(handler);
+        context=c;
+    }
+
+    @Override
+    public boolean deliverSelfNotifications() {
+        return super.deliverSelfNotifications();
+    }
+
+    @Override
+    public void onChange(boolean selfChange) {
+        super.onChange(selfChange);
+        AudioManager mAudioManager = (AudioManager) context.getSystemService(Context.AUDIO_SERVICE);
+        int currvol = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
+        float vol = (float) currvol / 100;
+        mAudioManager.setParameters("FMRadioVol=" + vol);
+        Log.d("FMService", "vol: " + String.format("%.10f", vol));
+    }
+}
 
 /**
  * Provides "background" FM Radio (that uses the hardware) capabilities,
@@ -228,6 +253,7 @@
    private Notification.Builder mRadioNotification;
    private Notification mNotificationInstance;
    private NotificationManager mNotificationManager;
+   private SettingsContentObserver mSettingsContentObserver;
 
    public FMRadioService() {
    }
@@ -276,6 +302,8 @@
       String valueStr = audioManager.getParameters("isA2dpDeviceSupported");
       mA2dpDeviceSupportInHal = valueStr.contains("=true");
       Log.d(LOGTAG, " is A2DP device Supported In HAL"+mA2dpDeviceSupportInHal);
+      mSettingsContentObserver = new SettingsContentObserver(this,new Handler());
+      getApplicationContext().getContentResolver().registerContentObserver(android.provider.Settings.System.CONTENT_URI, true, mSettingsContentObserver );
 
       getA2dpStatusAtStart();
    }
@@ -346,6 +374,7 @@
 
       TelephonyManager tmgr = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
       tmgr.listen(mPhoneStateListener, 0);
+      getApplicationContext().getContentResolver().unregisterContentObserver(mSettingsContentObserver);
 
       Log.d(LOGTAG, "onDestroy: unbindFromService completed");
 
@@ -1039,6 +1068,13 @@
         }
    };
 
+   float GetMusicStreamVol(){
+       AudioManager mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
+       int currvol = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
+       float vol = (float) currvol / 100;
+       return vol;
+   }
+
    private void startFM() {
        Log.d(LOGTAG, "In startFM");
        if(true == mAppShutdown) { // not to send intent to AudioManager in Shutdown
@@ -1084,6 +1120,28 @@
                String temp = mA2dpConnected ? "A2DP HS" : "Speaker";
                Log.d(LOGTAG, "Route audio to " + temp);
                AudioSystem.setForceUse(AudioSystem.FOR_MEDIA, AudioSystem.FORCE_SPEAKER);
+               if (mA2dpConnected) {
+                    Log.d(LOGTAG, "In startFM: mA2dpConnected");
+                    //mAudioManager.setMode(AudioManager.MODE_IN_CALL);
+                    mAudioManager.setSpeakerphoneOn(true);
+                    mAudioManager.setParameters("fm_mode=on");
+                    mAudioManager.setParameters("fm_radio_volume=on");
+                    mAudioManager.setParameters("FMRadioVol=" + GetMusicStreamVol());
+               }
+       } else {
+            //mAudioManager.setMode(AudioManager.MODE_IN_CALL);
+            Log.d(LOGTAG, "In startFM: Begin speaker off");
+            mAudioManager.setSpeakerphoneOn(false);
+            Log.d(LOGTAG, "In startFM: fm_mode=on");
+            mAudioManager.setParameters("fm_mode=on");
+            Log.d(LOGTAG, "In startFM: fm_radio_volume=on");
+            mAudioManager.setParameters("fm_radio_volume=on");
+            Log.d(LOGTAG, "In startFM: fm_mute=0");
+            mAudioManager.setParameters("fm_mute=0");
+            Log.d(LOGTAG, "In startFM: fm_radio_mute=0");
+            mAudioManager.setParameters("fm_radio_mute=0");
+            Log.d(LOGTAG, "In startFM: FMRadioVol=");
+            mAudioManager.setParameters("FMRadioVol=" + GetMusicStreamVol());
        }
 
        mPlaybackInProgress = true;
@@ -1100,6 +1158,10 @@
        Log.d(LOGTAG, "In stopFM");
        configureAudioDataPath(false);
        mPlaybackInProgress = false;
+       Log.d(LOGTAG, "In stopFM: fm_radio_mute=1");
+       mAudioManager.setParameters("fm_radio_mute=1");
+       Log.d(LOGTAG, "In stopFM: fm_mode=off");
+       mAudioManager.setParameters("fm_mode=off");
        try {
            if ((mServiceInUse) && (mCallbacks != null))
                mCallbacks.onFmAudioPathStopped();
@@ -1298,6 +1360,12 @@
        if (mRecorder == null)
            return;
        try {
+		   Thread.sleep(300);
+       } catch (InterruptedException ex) {
+           Log.d(LOGTAG, "RunningThread InterruptedException");
+           return;
+       }
+       try {
              mRecorder.stop();
              mRecorder.reset();
              mRecorder.release();
@@ -1564,6 +1632,12 @@
       public void run() {
          Log.v(LOGTAG, "Disabling Speaker");
          AudioSystem.setForceUse(AudioSystem.FOR_MEDIA, AudioSystem.FORCE_NONE);
+		 Log.v(LOGTAG, "Disabling Speaker: set speaker off");
+         mAudioManager.setSpeakerphoneOn(false);
+		// Log.v(LOGTAG, "Disabling Speaker: fm_mode=on");
+        // mAudioManager.setParameters("fm_mode=on");
+		// Log.v(LOGTAG, "Disabling Speaker: fm_mode=on");
+        // mAudioManager.setParameters("fm_mode=on");
       }
    };
 
@@ -2258,9 +2332,31 @@
            if (mA2dpConnected == true) {
                Log.d(LOGTAG, "A2DP connected, de-select BT");
                AudioSystem.setForceUse(AudioSystem.FOR_MEDIA, AudioSystem.FORCE_NO_BT_A2DP);
+               //mAudioManager.setMode(AudioManager.MODE_IN_CALL);
+			   Log.d(LOGTAG, "A2DP connected, de-select BT: Speaker off");
+               mAudioManager.setSpeakerphoneOn(false);
+			   Log.d(LOGTAG, "A2DP connected, de-select BT: fm_mode=on");
+               mAudioManager.setParameters("fm_mode=on");
+			   Log.d(LOGTAG, "A2DP connected, de-select BT: fm_radio_volume=on");
+               mAudioManager.setParameters("fm_radio_volume=on");
+			   Log.d(LOGTAG, "A2DP connected, de-select BT: FMRadioVol");
+               mAudioManager.setParameters("FMRadioVol=" + GetMusicStreamVol());
            } else {
                Log.d(LOGTAG, "A2DP is not connected, force none");
                AudioSystem.setForceUse(AudioSystem.FOR_MEDIA, AudioSystem.FORCE_NONE);
+               //mAudioManager.setMode(AudioManager.MODE_IN_CALL);
+			   Log.d(LOGTAG, "A2DP is not connected, force none: Speaker off");
+               mAudioManager.setSpeakerphoneOn(false);
+			   Log.d(LOGTAG, "A2DP is not connected, force none: fm_mode=on");
+               mAudioManager.setParameters("fm_mode=on");
+			   Log.d(LOGTAG, "A2DP is not connected, force none: fm_radio_volume=on");
+               mAudioManager.setParameters("fm_radio_volume=on");
+			   Log.d(LOGTAG, "A2DP is not connected, force none: fm_mute=0");
+               mAudioManager.setParameters("fm_mute=0");
+			   Log.d(LOGTAG, "A2DP is not connected, force none: fm_radio_mute=0");
+               mAudioManager.setParameters("fm_radio_mute=0");
+			   Log.d(LOGTAG, "A2DP is not connected, force none: FMRadioVol");
+               mAudioManager.setParameters("FMRadioVol=" + GetMusicStreamVol());
            }
        }
    }
@@ -2330,6 +2426,15 @@
       if ( mSpeakerPhoneOn) {
           mSpeakerPhoneOn = false;
           AudioSystem.setForceUse(AudioSystem.FOR_MEDIA, AudioSystem.FORCE_NONE);
+          //mAudioManager.setMode(AudioManager.MODE_IN_CALL);
+		  Log.d(LOGTAG, "fmOperationsReset: setSpeakerphoneOn=FALSE" );
+          mAudioManager.setSpeakerphoneOn(false);
+		  Log.d(LOGTAG, "fmOperationsReset: fm_mode=on" );
+          mAudioManager.setParameters("fm_mode=on");
+		  Log.d(LOGTAG, "fmOperationsReset: fm_radio_volume=on" );
+          mAudioManager.setParameters("fm_radio_volume=on");
+		  Log.d(LOGTAG, "fmOperationsReset: FMRadioVol" );
+          mAudioManager.setParameters("FMRadioVol=" + GetMusicStreamVol());
       }
    }
 
@@ -2454,13 +2559,31 @@
             if (mA2dpConnected == true) {
                 Log.d(LOGTAG, "A2DP connected, de-select BT");
                 AudioSystem.setForceUse(AudioSystem.FOR_MEDIA, AudioSystem.FORCE_NO_BT_A2DP);
+                //mAudioManager.setMode(AudioManager.MODE_IN_CALL);
+				Log.d(LOGTAG, "enableSpeaker: A2DP connected setSpeakerphoneOn=FALSE");
+                mAudioManager.setSpeakerphoneOn(false);
+                //mAudioManager.setParameters("fm_mode=on");
+                //mAudioManager.setParameters("fm_radio_volume=on");
+                //mAudioManager.setParameters("FMRadioVol=" + GetMusicStreamVol());
             } else {
                 Log.d(LOGTAG, "A2DP is not connected, force none");
                 AudioSystem.setForceUse(AudioSystem.FOR_MEDIA, AudioSystem.FORCE_NONE);
+                //mAudioManager.setMode(AudioManager.MODE_IN_CALL);
+				Log.d(LOGTAG, "enableSpeaker: setSpeakerphoneOn=FALSE");
+                mAudioManager.setSpeakerphoneOn(false);
+                //mAudioManager.setParameters("fm_mode=on");
+                //mAudioManager.setParameters("fm_radio_volume=on");
+                //mAudioManager.setParameters("FMRadioVol=" + GetMusicStreamVol());
             }
        } else if (speakerOn == true) {
            Log.d(LOGTAG, "enabling speaker");
            AudioSystem.setForceUse(AudioSystem.FOR_MEDIA, AudioSystem.FORCE_SPEAKER);
+           //mAudioManager.setMode(AudioManager.MODE_IN_CALL);
+		   Log.d(LOGTAG, "enableSpeaker: setSpeakerphoneOn=TRUE");
+           mAudioManager.setSpeakerphoneOn(true);
+           //mAudioManager.setParameters("fm_mode=on");
+           //mAudioManager.setParameters("fm_radio_volume=on");
+           //mAudioManager.setParameters("FMRadioVol=" + GetMusicStreamVol());
        }
 
        Log.d(LOGTAG, "speakerOn completed:" + speakerOn);
@@ -2560,7 +2683,8 @@
       if (audioManager != null)
       {
          mMuted = true;
-         audioManager.setParameters("fm_mute=1");
+         //audioManager.setParameters("fm_mute=1");
+         audioManager.setParameters("fm_radio_mute=1");
          if (mAudioTrack != null)
              mAudioTrack.setVolume(0.0f);
       }
@@ -2582,7 +2706,8 @@
       if (audioManager != null)
       {
          mMuted = false;
-         audioManager.setParameters("fm_mute=0");
+         //audioManager.setParameters("fm_mute=0");
+         audioManager.setParameters("fm_radio_mute=0");
          if (mAudioTrack != null)
              mAudioTrack.setVolume(1.0f);
          if (mResumeAfterCall)
